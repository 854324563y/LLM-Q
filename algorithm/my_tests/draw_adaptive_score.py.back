import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

wikitext2_fp16 = {
    'llama-7b-hf': 5.6770,
    'llama-13b-hf': 5.0907,
    'Llama-2-7b-hf': 5.4722,
    'Llama-2-13b-hf': 4.8836,
}

c4_fp16 = {
    'llama-7b-hf': 7.0790,
    'llama-13b-hf': 6.6113,
    'Llama-2-7b-hf': 6.9728,
    'Llama-2-13b-hf': 6.4682,
}

average_acc_fp16 = {
    'llama-7b-hf': 63.38,
    'llama-13b-hf': 65.83,
    'Llama-2-7b-hf': 63.80,
    'Llama-2-13b-hf': 65.99,
}


def plot_quantization_results(csv_file, net_name, score_metric):
    # 读取 CSV 文件
    df = pd.read_csv(csv_file)
    
    # 过滤出指定网络的数据
    df = df[df['net'] == net_name]
    
    # 按 factor 排序
    df = df.sort_values(by='factor')
    
    # 设置 Seaborn 风格和字体大小
    plt.rcParams.update({'font.size': 12})
    sns.set_style("whitegrid", {'grid.linestyle': '--'})
    
    # 创建图表
    fig, ax1 = plt.subplots(figsize=(10, 6))
    
    # 绘制得分曲线
    color = 'tab:blue'
    ax1.set_xlabel('Factor', fontsize=14)
    ax1.set_ylabel(score_metric, color=color, fontsize=14)
    ax1.plot(df['factor'], df[score_metric], marker='o', color=color, label=score_metric, linewidth=2, markersize=8)
    ax1.tick_params(axis='y', labelcolor=color)
    
    # 添加 FP16 基准线
    if score_metric == 'wikitext2':
        fp16_score = wikitext2_fp16[net_name]
    elif score_metric == 'c4':
        fp16_score = c4_fp16[net_name]
    elif score_metric == 'average_acc':
        fp16_score = average_acc_fp16[net_name]
    
    ax1.axhline(y=fp16_score, color=color, linestyle='--', alpha=0.5, label=f'FP16 ({fp16_score:.4f})', linewidth=2)
    # 在y轴右侧添加fp16得分标注
    ax1.text(df['factor'].max(), fp16_score, f'FP16: {fp16_score:.4f}', 
             color=color, va='bottom', ha='right', fontsize=12)
    
    # 创建共享 x 轴的第二个 y 轴
    ax2 = ax1.twinx()
    color = 'tab:red'
    ax2.set_ylabel('BitOps', color=color, fontsize=14)
    ax2.plot(df['factor'], df['bitops'], marker='s', linestyle='--', color=color, 
             label='BitOps', linewidth=2, markersize=8)
    ax2.tick_params(axis='y', labelcolor=color)
    
    # 标题
    plt.title(f'{net_name} - {score_metric} vs. BitOps', fontsize=16, pad=20)
    
    # 显示图例
    fig.tight_layout()
    ax1.legend(loc='upper left', fontsize=12)
    ax2.legend(loc='upper right', fontsize=12)
    
    # 设置更大的边距
    plt.subplots_adjust(right=0.85)
    
    # 显示图表
    plt.show()
    plt.savefig(f'my_tests/{net_name}_{score_metric}.png', dpi=300, bbox_inches='tight')

def plot_all_metrics(csv_file, net_name):
    # 读取 CSV 文件
    df = pd.read_csv(csv_file)
    
    # 过滤出指定网络的数据
    df = df[df['net'] == net_name]
    
    # 按 factor 排序
    df = df.sort_values(by='factor')
    
    # 设置 Seaborn 风格和字体大小
    plt.rcParams.update({'font.size': 12})
    sns.set_style("whitegrid", {'grid.linestyle': '--'})
    
    # 创建一行三列的子图
    fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(24, 6))
    metrics = ['average_acc', 'wikitext2', 'c4']
    axes = [ax1, ax2, ax3]
    
    for ax, metric in zip(axes, metrics):
        # 绘制得分曲线
        color = 'tab:blue'
        ax.set_xlabel('Factor', fontsize=14)
        ax.set_ylabel(metric, color=color, fontsize=14)
        ax.plot(df['factor'], df[metric], marker='o', color=color, label=metric, linewidth=2, markersize=8)
        ax.tick_params(axis='y', labelcolor=color)
        
        # 添加 FP16 基准线
        if metric == 'wikitext2':
            fp16_score = wikitext2_fp16[net_name]
        elif metric == 'c4':
            fp16_score = c4_fp16[net_name]
        elif metric == 'average_acc':
            fp16_score = average_acc_fp16[net_name]
        
        ax.axhline(y=fp16_score, color=color, linestyle='--', alpha=0.5, label=f'FP16 ({fp16_score:.4f})', linewidth=2)
        ax.text(df['factor'].max(), fp16_score, f'FP16: {fp16_score:.4f}', 
                color=color, va='bottom', ha='right', fontsize=12)
        
        # 创建共享 x 轴的第二个 y 轴
        ax_twin = ax.twinx()
        color = 'tab:red'
        ax_twin.set_ylabel('BitOps', color=color, fontsize=14)
        ax_twin.plot(df['factor'], df['bitops'], marker='s', linestyle='--', color=color, 
                    label='BitOps', linewidth=2, markersize=8)
        ax_twin.tick_params(axis='y', labelcolor=color)
        
        # 标题
        ax.set_title(f'{metric}', fontsize=16, pad=20)
        
        # 显示图例
        ax.legend(loc='upper left', fontsize=12)
        ax_twin.legend(loc='upper right', fontsize=12)
    
    # 设置总标题
    fig.suptitle(f'{net_name} - Metrics Comparison', fontsize=18, y=1.05)
    
    # 调整布局
    plt.tight_layout()
    
    # 保存图表
    plt.savefig(f'my_tests/{net_name}_all_metrics.png', dpi=300, bbox_inches='tight')
    plt.show()

# 示例调用
# plot_quantization_results('my_tests/adaptive-table.csv', 'llama-7b-hf', 'wikitext2')
# plot_quantization_results('my_tests/adaptive-table.csv', 'llama-7b-hf', 'c4')
# plot_quantization_results('my_tests/adaptive-table.csv', 'llama-7b-hf', 'average_acc')

# llama-13b-hf  Llama-2-13b-hf
plot_all_metrics('my_tests/adaptive-table.csv', 'Llama-2-7b-hf')
